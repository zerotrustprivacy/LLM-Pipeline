# .github/workflows/deploy-cloud-run.yml
name: Deploy to Cloud Run

on:
  push:
    branches:
      - main # Trigger on push to the main branch

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Your GCP project ID, from GitHub Secrets
  SERVICE_NAME: llm-api-service # Name of your Cloud Run service
  REGION: us-central1 # GCP region where Cloud Run service will be deployed
  ARTIFACT_REGISTRY_REPO: llm-app-repo # Name of your Artifact Registry repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Cloud SDK
        uses: 'google-github-actions/auth@v2.1.10'
        with:
          service_account: ${{ secrets.SERVICE_ACCOUNT }} # my-service-account@my-project.iam.gserviceaccount.com
          project_id: ${{ env.PROJECT_ID }}
          # Use Workload Identity Federation for secure authentication
          # You need to configure this in GCP first.
          # See https://github.com/google-github-actions/auth#setting-up-workload-identity-federation
          # OR for simplicity during initial setup, you could use a service account key JSON 
          # (NOT RECOMMENDED FOR PRODUCTION, but simpler for learning)
          credentials_json: ${{ secrets.GCP_CREDENTIALS }} 

      - name: Authenticate Docker to Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          docker build -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${SERVICE_NAME}:${GITHUB_SHA} .
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${SERVICE_NAME}:${GITHUB_SHA}

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${SERVICE_NAME} \
            --image ${REGION}-docker.pkg.dev/${PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${SERVICE_NAME}:${GITHUB_SHA} \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} # Pass LLM API key as environment variable
            # --set-env-vars GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} # Use this for Gemini
            # Pass any other env vars your app needs
